[SHC Upgrade Telemetry: Execution statistics]
search = index="_internal" (sourcetype="splunk_shc_upgrade_upgrader_script" OR sourcetype="splunk_shc_upgrade_completion_script" OR sourcetype="splunk_shc_upgrade_rest_endpoints") telemetry_id=* telemetry_peers=* telemetry_status=* telemetry_deployment_type=* telemetry_reason=* telemetry_from_version=* telemetry_to_version=* \
| table telemetry_id telemetry_peers telemetry_status telemetry_deployment_type telemetry_reason telemetry_from_version telemetry_to_version _time \
| eval encrypted_peer_names=substr(sha256(telemetry_peers),0,12) \
| stats count AS data.count by telemetry_id, encrypted_peer_names, telemetry_status, telemetry_deployment_type, telemetry_reason, telemetry_from_version, telemetry_to_version, _time \
| rename telemetry_id as data.upgrade_id, encrypted_peer_names as data.encrypted_peer_names, telemetry_status as data.upgrade_status, telemetry_deployment_type as data.deployment_type, _time as data.last_update, telemetry_reason as data.reason, telemetry_from_version as data.from_version, telemetry_to_version as data.to_version \
| makejson data.* output=event
enableSched=1
action.outputtelemetry                     = 1
action.outputtelemetry.param.anonymous     = 1
action.outputtelemetry.param.support       = 1
action.outputtelemetry.param.license       = 0
action.outputtelemetry.param.optinrequired = 3
action.outputtelemetry.param.component     = app.SHCUpgrade.executeStatistics
action.outputtelemetry.param.input         = event
action.outputtelemetry.param.type          = aggregate
cron_schedule = 0 3 * * *
dispatch.earliest_time = -1d

